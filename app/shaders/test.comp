#version 460

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(binding = 0, rgba32f) uniform readonly image2D imageSrc;
layout(binding = 1, rgba32f) uniform writeonly image2D imageDst;

layout (push_constant) uniform PushConstant {
    float time;
};


float rand(vec2 c){
	return fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

const float PI = 3.1415926535;

float noise(vec2 p, float freq ){
	float unit = 640/freq;
	vec2 ij = floor(p/unit);
	vec2 xy = mod(p,unit)/unit;
	//xy = 3.*xy*xy-2.*xy*xy*xy;
	xy = .5*(1.-cos(PI*xy));
	float a = rand((ij+vec2(0.,0.)));
	float b = rand((ij+vec2(1.,0.)));
	float c = rand((ij+vec2(0.,1.)));
	float d = rand((ij+vec2(1.,1.)));
	float x1 = mix(a, b, xy.x);
	float x2 = mix(c, d, xy.x);
	return mix(x1, x2, xy.y);
}

float pNoise(vec2 p, int res){
	float persistance = .5;
	float n = 0.;
	float normK = 0.;
	float f = 4.;
	float amp = 1.;
	int iCount = 0;
	for (int i = 0; i<50; i++){
		n+=amp*noise(p, f);
		f*=2.;
		normK+=amp;
		amp*=persistance;
		if (iCount == res) break;
		iCount++;
	}
	float nf = n/normK;
	return nf*nf*nf*nf;
}

void main() {
    ivec2 loc = ivec2(gl_GlobalInvocationID.xy);
    vec2 p = vec2(loc) + vec2(0, 200*time);
    const float noise = pNoise(p, 30);
    const float cooling = noise * 2;
    vec4 color;
    if (loc.y > 440) {
        color = vec4(1);
    } else {
        vec4 p0 = imageLoad(imageSrc, loc + ivec2(1, 0));
        vec4 p1 = imageLoad(imageSrc, loc + ivec2(-1, 0));
        vec4 p2 = imageLoad(imageSrc, loc + ivec2(0, 1));
        vec4 p3 = imageLoad(imageSrc, loc + ivec2(0, -1));
        color = (p0 + p1 + p2 + p3) /  4.0f - cooling;
    }
    imageStore(imageDst, loc + ivec2(0, -4), color);
    //imageStore(imageDst, loc + ivec2(0, -1), vec4(cooling));
}
