#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties
{
    mat4 viewInverse;
    mat4 projInverse;
} cam;

layout(location = 0) rayPayloadEXT Payload {
    // 4th component indicates a hit
    vec4 normal;
    vec3 color;
    float d;
} payload;


void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0f - 1.0f;

    vec3 origin = (cam.viewInverse * vec4(0,0,0,1)).xyz;
    vec3 target = (cam.projInverse * vec4(d.x, d.y,1,1)).xyz;
    vec3 direction = (cam.viewInverse * vec4(normalize(target), 0)).xyz;


    payload.normal = vec4(0);
    payload.color = vec3(0.0f);
    payload.d = 0.0f;

    for(int rec=0; rec<1; rec++) {
        float tmin = 0.001f;
        float tmax = 10000.0f;
        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin, direction, tmax, 0);

        if (payload.d < 0.00001f) break;

        origin = origin + (payload.d - 0.001f) * direction;
        direction = -reflect(-direction, payload.normal.xyz);
        origin += 0.001f * direction;
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color, 0));
}
